{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","m","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAGaA,G,YAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,gCAA2BH,EAAMI,QAAQC,GAAzC,4BACtB,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCHbC,EAAW,SAAAR,GAAK,OACzB,yBAAKC,UAAU,aACVD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SCH/BQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BAAOb,UAAU,SACbc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCgDHG,G,kBAjDb,aAAe,IAAD,8BACZ,+CAeFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAdtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALH,E,iFASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAAUmB,S,+BASnC,IAAD,EAE2BC,KAAKN,MAA/Bd,EAFD,EAECA,SAAUW,EAFX,EAEWA,YAEZU,EAAmBrB,EAASsB,QAAO,SAAAC,GAAC,OAGxCA,EAAE1B,KAAK2B,cAAcC,SAASd,EAAYa,kBAI5C,OACE,yBAAKhC,UAAU,OAEf,wBAAIA,UAAU,SAAd,uBAEE,kBAAC,EAAD,CACEY,YAAY,qBACZC,aAAce,KAAKf,eAIrB,kBAAC,EAAD,CAAUL,SAAUqB,S,GA5CVK,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.6776f4fe.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/&${props.monster.id}?set=set2&size=180x180`} />\r\n        <h1>{props.monster.name}</h1>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component.jsx';\r\n\r\nexport const CardList = props => (\r\n    <div className='card-list'>\r\n        {props.monsters.map(monster =>\r\n            <Card key={monster.id} monster={monster} />\r\n        )}\r\n    </div>\r\n);\r\n\r\n\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\n{/* richiamo onC e ci metto dentro una fuz che prende il target(cioè il pezzo html in questo caso l'intero input).value (il suo valore) */}\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input className='search'\r\n        type='search'\r\n        placeholder={placeholder}\r\n        onChange={handleChange} /> \r\n);\r\n\r\n\r\n","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component.jsx';\nimport { SearchBox } from './components/search-box/search-box.component.jsx';\nimport './App.css';\n\n//2° creo un classe che extends Component,  invece della funz con un return (con dentro html) che avevo\nclass App extends Component {\n  constructor() { //creo un costruttore con un super()\n    super();\n\n    this.state = {\n      monsters: [], //array di obj\n      searchField: '' //contiene l'input degli user\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users') //metto il link\n      .then(response => response.json()) //converto da json a js che capisce e modifica  \n      .then(users => this.setState({ monsters: users })) //sostituisco monster[] che è vuoto con users\n\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n\n  render() {\n\n    const { monsters, searchField } = this.state; //destructuring: tiro fuori degli element in array\n    //è come fare: const monsters = this.state.monsters, ecc\n    const filteredMonsters = monsters.filter(m => //creo una const con dentro un filter che prende una funz\n      //m e il nome lo prende e lo mette in lettera lower, inoltre includes fa un controllo per vedere se \n      //esiste o meno\n      m.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n\n    return (\n      <div className=\"App\">\n\n      <h1 className='title'>Monsters Rolodex xd</h1>\n\n        <SearchBox\n          placeholder='search monsters...'\n          handleChange={this.handleChange}\n        />\n\n        {/* e qua invece di mettere this.state.monsters, ci metto in monster già renderizzati */}\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n//crea array e fai un map\n// monsters: [ //array con dentro degli obj, monster : []\n// {\n//   name: 'Frankestein',\n//   id: 'id1'\n// },\n// {\n//   name: 'Dracula',\n//   id: 'id2'\n// },\n// {\n//   name: 'Zombie',\n//   id: 'id3'\n// }\n// ]\n// this.state.monsters.map(monster => //il map è come il foreach\n//   <h1 key={monster.id}> {monster.name} </h1>) //dentro h1 ci metto un id per identificare un singolo elemento\n\n\n\n// get users fetch\n// componentDidMount(){\n//   fetch('https://jsonplaceholder.typicode.com/users') //metto il link\n//   .then(response => response.json()) //converto da json a js che capisce e modificax  \n//   .then(users => this.setState({ monsters: users })) //sostituisco monster[] che è vuotk c+ quasj\n// }\n\n\n//bottone che cambia\n// <header className=\"App-header\">\n//   <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//   <p> {this.state.string} </p> {/*e qua richiamo il this.ecc che contiene la string che renderizzo*/}\n//   <button onClick={() => this.setState({ string: 'prova xd' })}>\n//     bitch </button> {/* con il setState io cambio qualsiasi key dentro quel obj*/}\n// </header>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}